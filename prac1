{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "9447b9a0",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "from scipy.optimize import linprog\n",
    "import matplotlib.pyplot as plt\n",
    "def nash_equilibrium(A):\n",
    "    # Поиск минимума матрицы А\n",
    "    min_value = abs(np.amin(A)) + 1\n",
    "    # Делаем матрицу положительной\n",
    "    A += min_value\n",
    "    # Подготовка столбцов ограничений для ЗЛП\n",
    "    z = np.ones(A.shape[0])\n",
    "    b_1 = -np.ones(A.shape[1])\n",
    "    w = -np.ones(A.shape[1])\n",
    "    b_2 = np.ones(A.shape[0])\n",
    "    # Проверка на равновесие по Нэшу\n",
    "    nash_i,nash_j = nash_equilibrium_point(A, min_value)\n",
    "    if(nash_i != 0):\n",
    "        p = np.zeros(A.shape[0])\n",
    "        p[nash_i - 1] = 1\n",
    "        q = np.zeros(A.shape[1])\n",
    "        q[nash_j - 1] = 1\n",
    "        v = A[nash_i - 1, nash_j - 1] - min_value\n",
    "        return p,q,v\n",
    "    # Поиск оптимального решения в смешанных стратегиях\n",
    "    # Игрок 1\n",
    "    res = linprog(w, A, b_2, options = {\"disp\": True}) \n",
    "    q = res.get(\"x\")\n",
    "    # Игрок 2\n",
    "    A = -np.transpose(A)\n",
    "    res = linprog(z, A, b_1, options = {\"disp\": True})\n",
    "    p = res.get(\"x\")\n",
    "    #Расчет значения игры\n",
    "    v = 1 / np.sum(p)\n",
    "    p *= v\n",
    "    q *= v\n",
    "    v = v - min_value\n",
    "    print(\"p: \", p)\n",
    "    print(\"q: \", q)\n",
    "    print(\"v: \", v)\n",
    "    return p, q, v\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "96266937",
   "metadata": {},
   "source": [
    "## Функция, выполняющая проверку на равновесие по Нэшу:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "45c6fe83",
   "metadata": {},
   "outputs": [],
   "source": [
    "def nash_equilibrium_point(A, min_value):\n",
    "    max_nash = np.zeros((len(A),len(A[0])))\n",
    "    for i, row in enumerate(A):\n",
    "        max_nash[i] = np.array(row == row.min())\n",
    "    for j, column in enumerate(A.T):\n",
    "        max_nash[:, j] += np.array(column == column.max())\n",
    "    sum = 0\n",
    "    print (\"Ситуации равновесия по Нэшу\")\n",
    "    for (i, j), value in np.ndenumerate(max_nash):\n",
    "        if value == 2:\n",
    "            sum += 1\n",
    "            nash_i = i + 1\n",
    "            nash_j = j + 1\n",
    "            print(\"Точка равновесия #\", sum)\n",
    "            print(\"v: \", A[i, j] - min_value)\n",
    "            print(\"Номер стратегии первого игрока: \", i + 1)\n",
    "            print(\"Номер стратегии второго игрока: \", j + 1)\n",
    "    if(sum == 0):\n",
    "        print(\"Таких точек нет\")\n",
    "        return 0, 0\n",
    "    elif(sum == 1):\n",
    "        return nash_i, nash_j\n",
    "    else:\n",
    "        print(\"Таких точек несколько\")\n",
    "        return 0, 0"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "58ea4cc3",
   "metadata": {},
   "source": [
    "## Функция, визуализирующая спектры оптимальных стратегий"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "cdc5bfee",
   "metadata": {},
   "outputs": [],
   "source": [
    "def draw(p, q):\n",
    "    x = max(len(p), len(q))\n",
    "    y = max(max(p), max(q))\n",
    "    plt.xlim([0, x + x / 2])\n",
    "    plt.ylim([0, y + y / 2])\n",
    "    for i, value in enumerate(p):\n",
    "        plt.scatter(1.0 * i + 1, value, color = 'blue')\n",
    "        plt.plot([1.0 * i + 1, 1.0 * i + 1], [0.0, value], color = 'blue') \n",
    "        plt.grid(True)   # линии вспомогательной сетки\n",
    "    plt.show()\n",
    "    plt.xlim([0, x + x / 2])\n",
    "    plt.ylim([0, y + y / 2])\n",
    "    for i, value in enumerate(q):\n",
    "        plt.scatter(1.0 * i + 1, value, color = 'blue')\n",
    "        plt.plot([1.0 * i + 1, 1.0 * i + 1], [0.0, value], color = 'blue')\n",
    "        plt.grid(True)   # линии вспомогательной сетки\n",
    "    plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e4fc2bab",
   "metadata": {},
   "source": [
    "## Примеры игры\n",
    "\n",
    "- спектр оптимальной стратегии состоит из одной точки\n",
    "- спектр оптимальной стратегии неполон\n",
    "- спектр оптимальной стратегии полон"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3a6f7ade",
   "metadata": {},
   "source": [
    "## 1. Спектр оптимальной стратегии состоит из одной точки\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c0341a6d",
   "metadata": {},
   "source": [
    "## 2. Спектр оптимальной стратегии неполон"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "d2c8f881",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Введите число строк в матрице выигрышей А:\n",
      "3 \n",
      "Введите матрицу выигрышей А по строкам:\n",
      "3 1 5\n",
      "1 3 3\n",
      "2 2 1\n",
      "Ситуации равновесия по Нэшу\n",
      "Таких точек нет\n",
      "Running HiGHS 1.2.2 [date: 2023-05-05, git hash: n/a]\n",
      "Copyright (c) 2022 ERGO-Code under MIT licence terms\n",
      "p:  [0.5 0.5 0. ]\n",
      "q:  [0.5 0.5 0. ]\n",
      "v:  1.9999999999999991\n",
      "Presolving model\n",
      "3 rows, 3 cols, 9 nonzeros\n",
      "3 rows, 3 cols, 9 nonzeros\n",
      "Presolve : Reductions: rows 3(-0); columns 3(-0); elements 9(-0) - Not reduced\n",
      "Problem not reduced by presolve: solving the LP\n",
      "Using EKK dual simplex solver - serial\n",
      "  Iteration        Objective     Infeasibilities num(sum)\n",
      "          0    -7.4999930198e-01 Ph1: 3(9.75); Du: 3(0.749999) 0s\n",
      "          2    -2.5000000000e-01 Pr: 0(0) 0s\n",
      "Model   status      : Optimal\n",
      "Simplex   iterations: 2\n",
      "Objective value     : -2.5000000000e-01\n",
      "HiGHS run time      :          0.00\n",
      "Running HiGHS 1.2.2 [date: 2023-05-05, git hash: n/a]\n",
      "Copyright (c) 2022 ERGO-Code under MIT licence terms\n",
      "Presolving model\n",
      "3 rows, 3 cols, 9 nonzeros\n",
      "3 rows, 3 cols, 9 nonzeros\n",
      "Presolve : Reductions: rows 3(-0); columns 3(-0); elements 9(-0) - Not reduced\n",
      "Problem not reduced by presolve: solving the LP\n",
      "Using EKK dual simplex solver - serial\n",
      "  Iteration        Objective     Infeasibilities num(sum)\n",
      "          0     0.0000000000e+00 Pr: 3(3) 0s\n",
      "          3     2.5000000000e-01 Pr: 0(0) 0s\n",
      "Model   status      : Optimal\n",
      "Simplex   iterations: 3\n",
      "Objective value     :  2.5000000000e-01\n",
      "HiGHS run time      :          0.00\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "print(\"Введите число строк в матрице выигрышей А:\")\n",
    "n = int(input())\n",
    "A = []\n",
    "print(\"Введите матрицу выигрышей А по строкам:\")\n",
    "for i in range(n):\n",
    "    row = input().split()\n",
    "    for i in range(len(row)):\n",
    "        row[i] = float(row[i])\n",
    "    A.append(row)\n",
    "A = np.array(A)\n",
    "p,q,v = nash_equilibrium(A)\n",
    "draw(p, q)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d3b2bc5d",
   "metadata": {},
   "source": [
    "### 3. Спектр оптимальной стратегии полон"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "96ce5a92",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Введите число строк в матрице А:\n",
      "3\n",
      "Введите матрицу А по строкам\n",
      "2 0 1\n",
      "1 2 0\n",
      "0 1 2\n",
      "Ситуации равновесия по Нэшу\n",
      "Таких точек нет\n",
      "p:  [0.33333333 0.33333333 0.33333333]\n",
      "q:  [0.33333333 0.33333333 0.33333333]\n",
      "v:  1.0\n",
      "Running HiGHS 1.2.2 [date: 2023-05-05, git hash: n/a]\n",
      "Copyright (c) 2022 ERGO-Code under MIT licence terms\n",
      "Presolving model\n",
      "3 rows, 3 cols, 9 nonzeros\n",
      "3 rows, 3 cols, 9 nonzeros\n",
      "Presolve : Reductions: rows 3(-0); columns 3(-0); elements 9(-0) - Not reduced\n",
      "Problem not reduced by presolve: solving the LP\n",
      "Using EKK dual simplex solver - serial\n",
      "  Iteration        Objective     Infeasibilities num(sum)\n",
      "          0    -2.9999955327e+00 Ph1: 3(18); Du: 3(3) 0s\n",
      "          3    -5.0000000000e-01 Pr: 0(0) 0s\n",
      "Model   status      : Optimal\n",
      "Simplex   iterations: 3\n",
      "Objective value     : -5.0000000000e-01\n",
      "HiGHS run time      :          0.00\n",
      "Running HiGHS 1.2.2 [date: 2023-05-05, git hash: n/a]\n",
      "Copyright (c) 2022 ERGO-Code under MIT licence terms\n",
      "Presolving model\n",
      "3 rows, 3 cols, 9 nonzeros\n",
      "3 rows, 3 cols, 9 nonzeros\n",
      "Presolve : Reductions: rows 3(-0); columns 3(-0); elements 9(-0) - Not reduced\n",
      "Problem not reduced by presolve: solving the LP\n",
      "Using EKK dual simplex solver - serial\n",
      "  Iteration        Objective     Infeasibilities num(sum)\n",
      "          0     0.0000000000e+00 Pr: 3(3) 0s\n",
      "          3     5.0000000000e-01 Pr: 0(0) 0s\n",
      "Model   status      : Optimal\n",
      "Simplex   iterations: 3\n",
      "Objective value     :  5.0000000000e-01\n",
      "HiGHS run time      :          0.00\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "print(\"Введите число строк в матрице А:\")\n",
    "n = int(input())\n",
    "A = []\n",
    "print(\"Введите матрицу А по строкам\")\n",
    "for i in range(n):\n",
    "    row = input().split()\n",
    "    for i in range(len(row)):\n",
    "        row[i] = float(row[i])\n",
    "    A.append(row)\n",
    "A = np.array(A)\n",
    "p,q,v = nash_equilibrium(A)\n",
    "draw(p, q)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "03540215",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}

