import numpy as np
from scipy.optimize import linprog
import matplotlib.pyplot as plt
def nash_equilibrium(A):
    # Поиск минимума матрицы А
    min_value = abs(np.amin(A)) + 1
    # Делаем матрицу положительной
    A += min_value
    # Подготовка столбцов ограничений для ЗЛП
    z = np.ones(A.shape[0])
    b_1 = -np.ones(A.shape[1])
    w = -np.ones(A.shape[1])
    b_2 = np.ones(A.shape[0])
    # Проверка на равновесие по Нэшу
    nash_i,nash_j = nash_equilibrium_point(A, min_value)
    if(nash_i != 0):
        p = np.zeros(A.shape[0])
        p[nash_i - 1] = 1
        q = np.zeros(A.shape[1])
        q[nash_j - 1] = 1
        v = A[nash_i - 1, nash_j - 1] - min_value
        return p,q,v
    # Поиск оптимального решения в смешанных стратегиях
    # Игрок 1
    res = linprog(w, A, b_2, options = {"disp": True}) 
    q = res.get("x")
    # Игрок 2
    A = -np.transpose(A)
    res = linprog(z, A, b_1, options = {"disp": True})
    p = res.get("x")
    #Расчет значения игры
    v = 1 / np.sum(p)
    p *= v
    q *= v
    v = v - min_value
    print("p: ", p)
    print("q: ", q)
    print("v: ", v)
    return p, q, v



## Функция, выполняющая проверку на равновесие по Нэшу:
def draw(p, q):
    x = max(len(p), len(q))
    y = max(max(p), max(q))
    plt.xlim([0, x + x / 2])
    plt.ylim([0, y + y / 2])
    for i, value in enumerate(p):
        plt.scatter(1.0 * i + 1, value, color = 'blue')
        plt.plot([1.0 * i + 1, 1.0 * i + 1], [0.0, value], color = 'blue') 
        plt.grid(True)   # линии вспомогательной сетки
    plt.show()
    plt.xlim([0, x + x / 2])
    plt.ylim([0, y + y / 2])
    for i, value in enumerate(q):
        plt.scatter(1.0 * i + 1, value, color = 'blue')
        plt.plot([1.0 * i + 1, 1.0 * i + 1], [0.0, value], color = 'blue')
        plt.grid(True)   # линии вспомогательной сетки
    plt.show()


## Примеры игры


## 1. Спектр оптимальной стратегии состоит из одной точки




## 2. Спектр оптимальной стратегии неполон


print("Введите число строк в матрице выигрышей А:")
n = int(input())
A = []
print("Введите матрицу выигрышей А по строкам:")
for i in range(n):
    row = input().split()
    for i in range(len(row)):
        row[i] = float(row[i])
    A.append(row)
A = np.array(A)
p,q,v = nash_equilibrium(A)
draw(p, q)



Введите число строк в матрице выигрышей А:
3 
Введите матрицу выигрышей А по строкам:
3 1 5
1 3 3
2 2 1
Ситуации равновесия по Нэшу
Таких точек нет
Running HiGHS 1.2.2 [date: 2023-05-05, git hash: n/a]
Copyright (c) 2022 ERGO-Code under MIT licence terms
p:  [0.5 0.5 0. ]
q:  [0.5 0.5 0. ]
v:  1.9999999999999991
Presolving model
3 rows, 3 cols, 9 nonzeros
3 rows, 3 cols, 9 nonzeros
Presolve : Reductions: rows 3(-0); columns 3(-0); elements 9(-0) - Not reduced
Problem not reduced by presolve: solving the LP
Using EKK dual simplex solver - serial
  Iteration        Objective     Infeasibilities num(sum)
          0    -7.4999930198e-01 Ph1: 3(9.75); Du: 3(0.749999) 0s
          2    -2.5000000000e-01 Pr: 0(0) 0s
Model   status      : Optimal
Simplex   iterations: 2
Objective value     : -2.5000000000e-01
...
Model   status      : Optimal
Simplex   iterations: 3
Objective value     :  2.5000000000e-01
HiGHS run time      :          0.00
Output is truncated. View as a scrollable element or open in a text editor. Adjust cell output settings...









### 3. Спектр оптимальной стратегии полон


print("Введите число строк в матрице А:")
n = int(input())
A = []
print("Введите матрицу А по строкам")
for i in range(n):
    row = input().split()
    for i in range(len(row)):
        row[i] = float(row[i])
    A.append(row)
A = np.array(A)
p,q,v = nash_equilibrium(A)
draw(p, q)



Введите число строк в матрице А:
3
Введите матрицу А по строкам
2 0 1
1 2 0
0 1 2
Ситуации равновесия по Нэшу
Таких точек нет
p:  [0.33333333 0.33333333 0.33333333]
q:  [0.33333333 0.33333333 0.33333333]
v:  1.0
Running HiGHS 1.2.2 [date: 2023-05-05, git hash: n/a]
Copyright (c) 2022 ERGO-Code under MIT licence terms
Presolving model
3 rows, 3 cols, 9 nonzeros
3 rows, 3 cols, 9 nonzeros
Presolve : Reductions: rows 3(-0); columns 3(-0); elements 9(-0) - Not reduced
Problem not reduced by presolve: solving the LP
Using EKK dual simplex solver - serial
  Iteration        Objective     Infeasibilities num(sum)
          0    -2.9999955327e+00 Ph1: 3(18); Du: 3(3) 0s
          3    -5.0000000000e-01 Pr: 0(0) 0s
Model   status      : Optimal
Simplex   iterations: 3
Objective value     : -5.0000000000e-01
...
Model   status      : Optimal
Simplex   iterations: 3
Objective value     :  5.0000000000e-01
HiGHS run time      :          0.00
Output is truncated. View as a scrollable element or open in a text editor. Adjust cell output settings...
